name: tuva-empi

services:
  localstack:
    # https://hub.docker.com/layers/localstack/localstack/s3-latest/images/sha256-018356a92323720b4b683372ef83e4fb143db933ae3355fbd4e851afef179e2c?context=explore
    image: localstack/localstack:s3-latest@sha256:b5758a58e8500838464a0ee971229379ac933482b57f9abb2f68ff22d55c3320
    ports:
      - 127.0.0.1:4566:4566
    volumes:
      - localstack-data:/var/lib/localstack:cached
    networks:
      - app-network

  db:
    # https://hub.docker.com/layers/library/postgres/16/images/sha256-295787823185868c4679563715b0a7a07309387f3836117f1b0984d1bfc2bd24
    image: postgres:16@sha256:e38a7fe2234174d0eb69b5467d346e1bb193c09f98adc229fc9df30fe364dd4a
    environment:
      - POSTGRES_DB=tuva_empi
      - POSTGRES_USER=tuva_empi
      - POSTGRES_PASSWORD=tuva_empi
    volumes:
      - db-data:/var/lib/postgresql/data:cached
    networks:
      - app-network
    ports:
      - 127.0.0.1:5432:5432

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    depends_on:
      - db
    stdin_open: true
    tty: true
    environment:
      PYTHONUNBUFFERED: 1
      # Tuva EMPI configuration file
      CONFIG_FILE: config/local.json
      # AWS config for the sCLI and Boto3
      AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    working_dir: /app
    volumes:
      - ..:/app:cached
      - backend-pip-cache:/root/.cache/pip
      - ${AWS_CONFIG_FILE:-./backend/empty-aws-config}:/root/.aws/config
    networks:
      - app-network
    expose:
      - "8000"
    ports:
      - 127.0.0.1:8000:8000

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    working_dir: /app
    volumes:
      - ..:/app:cached
    networks:
      - app-network
    expose:
      - "3000"
    ports:
      - 127.0.0.1:3000:3000

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    expose:
      - "80"

  keycloak:
    image: quay.io/keycloak/keycloak:26.1
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks:
      - app-network
    ports:
      - 127.0.0.1:8080:8080
    command: ["start-dev", "--hostname=http://localhost:8080", "--hostname-strict=false"]

  keycloak-init:
    build:
      context: keycloak-init
      dockerfile: Dockerfile
    depends_on:
      - keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_REALM: ${KC_REALM}
      KC_CLIENT_ID: ${KC_CLIENT_ID}
      KC_CLIENT_SECRET: ${KC_CLIENT_SECRET}
      KC_CLIENT_REDIRECT_URL: http://localhost:9000/oauth2/callback
      KC_USER_USERNAME: ${KC_USER_USERNAME}
      KC_USER_EMAIL: ${KC_USER_EMAIL}
      KC_USER_PASSWORD: ${KC_USER_PASSWORD}
    networks:
      - app-network

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.8.2
    restart: always
    environment:
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_REDIRECT_URL: http://localhost:9000/oauth2/callback
      OAUTH2_PROXY_UPSTREAMS: http://nginx
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:9000
      OAUTH2_PROXY_SCOPE: openid offline_access
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_WHITELIST_DOMAINS: localhost,backend
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: true
      OAUTH2_PROXY_SKIP_OIDC_EMAIL_VERIFICATION: true
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${OAUTH2_PROXY_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_REFRESH: 240s
      OAUTH2_PROXY_PROMPT: consent
      OAUTH2_PROXY_BACKEND_LOGOUT_URL: ${OAUTH2_PROXY_BACKEND_LOGOUT_URL}
    networks:
      - app-network
    ports:
      - 127.0.0.1:9000:9000
    # I wasn't able to get things working without this
    extra_hosts:
      - localhost:host-gateway


volumes:
  db-data:
  localstack-data:
  backend-pip-cache:
  keycloak-data:


networks:
  app-network:
    driver: bridge
